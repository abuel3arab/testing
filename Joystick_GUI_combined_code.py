# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ROVUI2.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
# hi
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import pygame
import time
import sys
# this library is to get the screen width and height
from screeninfo import get_monitors
import serial

# serial_port = 5000
# serial_instance = serial.Serial(serial_port, 9600, timeout=1)


##########################################################################################
#  Tasks to be accomplished yet:
#     1. Modify the GUI window and add appropriate buttons and features
#     2. Display joystick readings in the GUI
#     3. Easily add another function to send serial data using pyserial to the arduino
#
#
#


class Ui_MainWindow(object):
    # ------------

    def Gripper_handler(self, gripper_state):
        # if button is checked
        if gripper_state:
            print(" Just before trying the gripper_handler_status")
            self.Gripper_handler_button.setText("YYYY")
            # setting background color to light-blue
            self.Gripper_handler_button.setStyleSheet(
                "background-color : lightblue")

        # if it is unchecked
        else:
            self.Gripper_handler_button.setText("WWWW")
            # set background color back to light-grey
            self.Gripper_handler_button.setStyleSheet(
                "background-color : lightgrey")

    def LED_handler(self):

        # if button is checked
        if self.LED_handler_button.isChecked():
            self.LED_handler_Status.setText("ON")
            # setting background color to light-blue
            self.LED_handler_button.setStyleSheet("background-color : green")

        # if it is unchecked
        else:
            self.LED_handler_Status.setText("OFF")
            # set background color back to light-grey
            self.LED_handler_button.setStyleSheet(
                "background-color : lightgrey")

    def Gripper(self):

        # if button is checked
        if self.LED_handler_button.isChecked():
            self.LED_handler_Status.setText("ON")
            # setting background color to light-blue
            self.LED_handler_button.setStyleSheet("background-color : green")

        # if it is unchecked
        else:
            self.LED_handler_Status.setText("OFF")
            # set background color back to light-grey
            self.LED_handler_button.setStyleSheet(
                "background-color : lightgrey")

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(width, height)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # GUI Title Writing on the GUI
        self.GUI_title = QtWidgets.QLabel(self.centralwidget)
        self.GUI_title.setGeometry(QtCore.QRect(500, 10, 490, 150))
        font = QtGui.QFont()
        font.setPointSize(44)
        self.GUI_title.setFont(font)
        self.GUI_title.setObjectName("GUI_title")

        # Camera led section
        self.Gripper_handler_button = QtWidgets.QPushButton(self.centralwidget)
        self.Gripper_handler_button.setGeometry(
            QtCore.QRect(80, 210, 250, 100))
        self.Gripper_handler_button.setDisabled(True)  # Disable the button
        font = QtGui.QFont()
        font.setPointSize(29)
        self.Gripper_handler_button.setFont(font)
        self.Gripper_handler_button.setObjectName("Gripper_handler_button")

        # Camera led section status
        self.Gripper_handler_Status = QtWidgets.QLabel(self.centralwidget)
        self.Gripper_handler_Status.setGeometry(
            QtCore.QRect(80, 140, 250, 80))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.Gripper_handler_Status.setFont(font)
        self.Gripper_handler_Status.setObjectName("Gripper_handler_Status")

        # auto mode section
        self.LED_handler_button = QtWidgets.QPushButton(self.centralwidget)
        self.LED_handler_button.setGeometry(QtCore.QRect(340, 210, 250, 100))
        self.LED_handler_button.setDisabled(True)  # Disable the button
        font = QtGui.QFont()
        font.setPointSize(25)
        self.LED_handler_button.setFont(font)
        self.LED_handler_button.setObjectName("LED_handler_button")

        # auto mode section status
        self.LED_handler_Status = QtWidgets.QLabel(self.centralwidget)
        self.LED_handler_Status.setGeometry(QtCore.QRect(340, 140, 250, 80))
        font = QtGui.QFont()
        font.setPointSize(29)
        self.LED_handler_Status.setFont(font)
        self.LED_handler_Status.setObjectName("LED_handler_Status")

        # Leakage sensor section
        self.leakage_button = QtWidgets.QPushButton(self.centralwidget)
        self.leakage_button.setGeometry(QtCore.QRect(600, 210, 250, 100))
        self.leakage_button.setDisabled(True)  # Disable the button
        font = QtGui.QFont()
        font.setPointSize(25)
        self.leakage_button.setFont(font)
        self.leakage_button.setObjectName("Leakage sensor")

        # Leakage sensor section
        self.leakage_button_status = QtWidgets.QLabel(self.centralwidget)
        self.leakage_button_status.setGeometry(QtCore.QRect(600, 140, 250, 80))
        font = QtGui.QFont()
        font.setPointSize(29)
        self.leakage_button_status.setFont(font)
        self.leakage_button_status.setObjectName("Leakage sensor status")

# --------------------------------------------------Eight directions labels and their corresponding speed values----------------
        # Upward speed related
        self.speeduplabel = QtWidgets.QLabel(self.centralwidget)
        self.speeduplabel.setGeometry(QtCore.QRect(1470, 450, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.speeduplabel.setFont(font)
        self.speeduplabel.setObjectName("speeduplabel")
        # upward speed value
        self.speedupvalue = QtWidgets.QLabel(self.centralwidget)
        self.speedupvalue.setGeometry(QtCore.QRect(1635, 450, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.speedupvalue.setFont(font)
        self.speedupvalue.setObjectName("speedupvalue")
        # # ???????????????????????????????????????????????????? ask Yousof about this image
        # self.image = QtWidgets.QLabel(self.centralwidget)
        # self.image.setGeometry(QtCore.QRect(270, 160, 271, 141))
        # self.image.setText("")
        # self.image.setPixmap(QtGui.QPixmap(
        #     "Downloads\WhatsApp Image 2023-04-06 at 1.04.05 AM.jpeg"))
        # self.image.setScaledContents(True)
        # self.image.setObjectName("image")

        # downward label
        self.speeddownlabel = QtWidgets.QLabel(self.centralwidget)
        self.speeddownlabel.setGeometry(QtCore.QRect(1470, 490, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.speeddownlabel.setFont(font)
        self.speeddownlabel.setObjectName("speeddownlabel")
        # downward value
        self.speeddownvalue = QtWidgets.QLabel(self.centralwidget)
        self.speeddownvalue.setGeometry(QtCore.QRect(1635, 490, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.speeddownvalue.setFont(font)
        self.speeddownvalue.setObjectName("speeddownvalue")
        # forward label
        self.forward = QtWidgets.QLabel(self.centralwidget)
        self.forward.setGeometry(QtCore.QRect(1470, 525, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.forward.setFont(font)
        self.forward.setObjectName("forward")

        # forward value
        self.forwardvalue = QtWidgets.QLabel(self.centralwidget)
        self.forwardvalue.setGeometry(QtCore.QRect(1635, 525, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.forwardvalue.setFont(font)
        self.forwardvalue.setObjectName("forwardvalue")

        # backward label
        self.backward = QtWidgets.QLabel(self.centralwidget)
        self.backward.setGeometry(QtCore.QRect(1470, 560, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.backward.setFont(font)
        self.backward.setObjectName("backward")

        # backward value
        self.backwardvalue = QtWidgets.QLabel(self.centralwidget)
        self.backwardvalue.setGeometry(QtCore.QRect(1635, 560, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.backwardvalue.setFont(font)
        self.backwardvalue.setObjectName("backwardvalue")

        # right label
        self.right = QtWidgets.QLabel(self.centralwidget)
        self.right.setGeometry(QtCore.QRect(1470, 595, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.right.setFont(font)
        self.right.setObjectName("right")

        # right value
        self.rightvalue = QtWidgets.QLabel(self.centralwidget)
        self.rightvalue.setGeometry(QtCore.QRect(1635, 595, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.rightvalue.setFont(font)
        self.rightvalue.setObjectName("rightvalue")

        # left label
        self.left = QtWidgets.QLabel(self.centralwidget)
        self.left.setGeometry(QtCore.QRect(1470, 630, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.left.setFont(font)
        self.left.setObjectName("left")

        # left value
        self.leftvalue = QtWidgets.QLabel(self.centralwidget)
        self.leftvalue.setGeometry(QtCore.QRect(1635, 630, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.leftvalue.setFont(font)
        self.leftvalue.setObjectName("leftvalue")

        # anticlockwise label
        self.anticlock = QtWidgets.QLabel(self.centralwidget)
        self.anticlock.setGeometry(QtCore.QRect(1470, 665, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.anticlock.setFont(font)
        self.anticlock.setObjectName("anticlock")

        # anticlockwise value
        self.anticlockvalue = QtWidgets.QLabel(self.centralwidget)
        self.anticlockvalue.setGeometry(QtCore.QRect(1635, 665, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.anticlockvalue.setFont(font)
        self.anticlockvalue.setObjectName("anticlockvalue")

        # clockwise label
        self.clockwise = QtWidgets.QLabel(self.centralwidget)
        self.clockwise.setGeometry(QtCore.QRect(1470, 699, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.clockwise.setFont(font)
        self.clockwise.setObjectName("clockwise")

        # clockwise value
        self.clockwisevalue = QtWidgets.QLabel(self.centralwidget)
        self.clockwisevalue.setGeometry(QtCore.QRect(1635, 699, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.clockwisevalue.setFont(font)
        self.clockwisevalue.setObjectName("clockwisevalue")
        #
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        #
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        #
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Gripper_handler_button.setText(
            _translate("MainWindow", "Not pressed"))
        self.LED_handler_button.setText(_translate("MainWindow", "OFF"))
        self.Gripper_handler_Status.setText(
            _translate("MainWindow", "   Gripper"))
        self.LED_handler_Status.setText(_translate("MainWindow", "     LED"))
        self.GUI_title.setText(_translate("Mainwindow", " ROV Window"))
        self.speeduplabel.setText(_translate("MainWindow", "Upwards"))
        self.speedupvalue.setText(_translate("MainWindow", "   Idle"))
        self.speeddownlabel.setText(
            _translate("MainWindow", "Downwards"))
        self.speeddownvalue.setText(_translate("MainWindow", "   Idle"))
        self.forward.setText(_translate("MainWindow", "Forward "))
        self.backward.setText(_translate("MainWindow", "Backward "))
        self.forwardvalue.setText(_translate("MainWindow", "   Idle"))
        self.backwardvalue.setText(_translate("MainWindow", "   Idle"))
        self.right.setText(_translate("MainWindow", "Right"))
        self.rightvalue.setText(_translate("MainWindow", "   Idle"))
        self.left.setText(_translate("MainWindow", "Left"))
        self.leftvalue.setText(_translate("MainWindow", "   Idle"))
        self.anticlock.setText(_translate("MainWindow", "Anticlock"))
        self.anticlockvalue.setText(_translate("MainWindow", "   Idle"))
        self.clockwise.setText(_translate("MainWindow", "Clockwise"))
        self.clockwisevalue.setText(_translate("MainWindow", "   Idle"))
        self.leakage_button_status.setText(
            _translate("MainWindow", "  Leakage"))
        self.leakage_button.setText(_translate("MainWindow", "  OFF"))

    def update_display(self, up_value, down_value, forward_value,
                       back_value, right_value, left_value, clock_value, anticlock_value):
        self.forwardvalue.setText(up_value)

    def joystick_reading(self):
        pygame.joystick.init()
        joysticks = [pygame.joystick.Joystick(x)
                     for x in range(pygame.joystick.get_count())]

        pygame.init()
        y_axis = 0
        x_axis = 0
        z_axis = 0
        turbo = 0

        # creating a variable that holdes the joystick connected to the pc
        # in this way we are crating a joystick object pygame-library, joystick-module, Joystick-class
        name = pygame.joystick.Joystick(0)
        number = [name.get_numbuttons()]
        # print("Joystick name:", name.get_name())
        # print("Number of buttons: ", number)
        # for

    # The boolean variables to detect whether the LED is pressed or not, or if the LED is ON are presented below
        button_pressed = False
        Gripper_handlered = False
        Leakage = False

        print("Number of axes:", pygame.joystick.Joystick(0).get_numaxes())
        xxis = pygame.joystick.Joystick(0).get_axis(1)
        print(xxis)

        button_pressed = False
        up = "idle"
        down = "idle"
        forward = "idle"
        backward = "idle"
        right = "idle"
        left = "idle"
        clock_rotation = "idle"
        anti_clock_rotation = "idle"
        is_LED_button_pressed = False
        initial_time = time.time()
        while ((time.time()-initial_time) < 1.5):
            for event in pygame.event.get():
                # event = pygame.event.get()
                h = pygame.joystick.Joystick(0).get_axis(0)
                if event == h:
                    print("x-axis is calibrated by the following terminal", h)
                if pygame.joystick.Joystick(0).get_button(11) and not button_pressed:
                    # the buttons numbering starts from  ,g0

                    # 0 is the hanging click
                    # 1 side touch
                    # print("Number 11")
                    # print(event)
                    button_pressed = True
                    # this will serve as a toggle switch ON and OFF of the LED
                    is_LED_button_pressed = True
                elif pygame.joystick.Joystick(0).get_button(10) and not button_pressed:
                    # the buttons numbering starts from  0

                    # 0 is the hanging click
                    # 1 side touch

                    # print("Number 10")
                    # print(event)
                    button_pressed = True

                elif pygame.joystick.Joystick(0).get_button(9) and not button_pressed:
                    # the buttons numbering starts from  0

                    # 0 is the hanging click
                    # 1 side touch

                    # print("Number 9")
                    # print(event)
                    button_pressed = True

                elif pygame.joystick.Joystick(0).get_button(8) and not button_pressed:
                    # the buttons numbering starts from  0

                    # 0 is the hanging click
                    # 1 side touch

                    # print("Number 8")
                    # print(event)
                    button_pressed = True

                elif pygame.joystick.Joystick(0).get_button(7) and not button_pressed:
                    # the buttons numbering starts from  0

                    # 0 is the hanging click
                    # 1 side touch

                    # print("Number 7")
                    # print(event)
                    # print("")
                    button_pressed = True

                elif pygame.joystick.Joystick(0).get_button(6) and not button_pressed:
                    # the buttons numbercing starts from  0

                    # 0 is the hanging click
                    # 1 side touch

                    # print("Number 6")
                    # print(event)
                    # print("")
                    button_pressed = True

                elif pygame.joystick.Joystick(0).get_button(5) and not button_pressed:
                    # the buttons numbercing starts from  0

                    # 0 is the hanging click
                    # 1 side touch

                    # print("Number 5")
                    # print(event)
                    # print("")
                    button_pressed = True

                elif pygame.joystick.Joystick(0).get_button(4) and not button_pressed:
                    # the buttons numbercing starts from  0

                    # 0 is the hanging click
                    # 1 side touch

                    # print("Number 4")
                    # print(event)
                    # print("")
                    button_pressed = True

                elif pygame.joystick.Joystick(0).get_button(3) and not button_pressed:
                    # the buttons numbercing starts from  0

                    # 0 is the hanging click
                    # 1 side touch

                    # print("Number 3")
                    # print(event)
                    # print("")
                    button_pressed = True

                elif pygame.joystick.Joystick(0).get_button(2) and not button_pressed:
                    # the buttons numbercing starts from  0

                    # 0 is the hanging click
                    # 1 side touch

                    # print("Number 2")
                    # print(event)
                    # print("")
                    button_pressed = True

                elif pygame.joystick.Joystick(0).get_button(1) and not button_pressed:
                    # the buttons numbercing starts from  0

                    # 0 is the hanging click
                    # 1 side touch

                    # print("Number 1")
                    # print(event)
                    # print("")
                    button_pressed = True

                elif pygame.joystick.Joystick(0).get_button(0) and not button_pressed:
                    # the buttons numbercing starts from  0

                    # 0 is the hanging click
                    # 1 side touch

                    # print("This is the gripper button")
                    # print(event)
                    # print("")
                    button_pressed = True
                    Gripper_handlered = True

                if event.type == pygame.JOYAXISMOTION and not button_pressed:
                    # read gripper movements
                    # if event.axis == <index_of_gripper_axis>:
                    print("what is this state")
                    x_axis = pygame.joystick.Joystick(0).get_axis(0)
                    y_axis = pygame.joystick.Joystick(0).get_axis(1)
                    z_axis = pygame.joystick.Joystick(0).get_axis(2)
                    # for up and down movement
                    turbo = pygame.joystick.Joystick(0).get_axis(3)

                    # print("X-axis ", x_axis)
                    # print("Y-axis", y_axis)
                    # print("Z-axis", z_axis)
                    # print("turbo-vertical motion controller", turbo)
                    button_pressed = True
            # resetting button_pressed to be false so that it will not endlessly press a button unless it is actaually pressed
            # because the clock cycle is so fast even for a short duration press it will read many times and thus print many times

              # up buttons
                if y_axis >= -1 and y_axis < 0:
                    if (y_axis < 0 and y_axis >= -0.2):
                        forward = "low"
                    elif (y_axis < -0.2 and y_axis >= -0.6):
                        forward = "medium"
                    elif (y_axis < -0.6 and y_axis >= -1):
                        forward = "high"
                else:
                    if (y_axis > 0 and y_axis >= 0.2):
                        backward = "low"
                    elif (y_axis > 0.2 and y_axis <= 0.6):
                        backward = "medium"
                    elif (y_axis > 0.6 and y_axis <= 1):
                        backward = "high"
# ---------------------------------
                if x_axis >= -1 and x_axis < 0:
                    if (x_axis < 0 and x_axis >= -0.2):
                        left = "low"
                    elif (x_axis < -0.2 and x_axis >= -0.6):
                        left = "medium"
                    elif (x_axis < -0.6 and x_axis >= -1):
                        left = "high"
                else:
                    if (x_axis > 0 and x_axis >= 0.2):
                        up = "low"
                    elif (x_axis > 0.2 or x_axis <= 0.6):
                        up = "medium"
                    elif (x_axis > 0.6 and x_axis <= 1):
                        up = "high"
# ------------------------------------
                if z_axis >= -1 and z_axis < 0:
                    if (z_axis < 0 and z_axis >= -0.2):
                        anti_clock_rotation = "low"
                    elif (z_axis < -0.2 and z_axis >= -0.6):
                        anti_clock_rotation = "medium"
                    elif (z_axis < -0.6 and z_axis >= -1):
                        anti_clock_rotation = "high"
                else:
                    if (z_axis > 0 and z_axis >= 0.2):
                        clock_rotation = "low"
                    elif (z_axis > 0.2 and z_axis <= 0.6):
                        clock_rotation = "medium"
                    elif (z_axis > 0.6 and z_axis <= 1):
                        clock_rotation = "high"

# ------------------------------------
                if turbo >= -1 and turbo < 0:
                    if (turbo < 0 and turbo >= -0.2):
                        up = "low"
                    elif (turbo < -0.2 and turbo >= -0.6):
                        up = "medium"
                    elif (turbo < -0.6 and turbo >= -1):
                        up = "high"
                elif turbo > 0 and turbo <= 1:
                    if (turbo > 0 and turbo <= 0.2):
                        down = "low"
                    elif (turbo > 0.2 and turbo <= 0.6):
                        down = "medium"
                    elif (turbo > 0.6 and turbo <= 1):
                        down = "high"

# ------------------------------------

        # one thing to add here is the LED (joystick button), leakage sensor(based on leakage detection) and gripper status(joystick button)
        results_tuple = (up, down, forward, backward, right, left, clock_rotation,
                         anti_clock_rotation, Gripper_handlered, is_LED_button_pressed, Leakage)

        # self.update_GUI_with_joystick(results_tuple)
        # self.Gripper_handler(results_tuple[8])

        # self.update_display(up, down, forward,
        #                     backward, right, left, clock_rotation, anti_clock_rotation)

        return results_tuple

    # def update_states(bound_results):
    #     print(type(bound_results))
    #     return True


 # ---------------------We have read the raw values from the joystick. In the next section we shall return meaningful values to be displayed from this function
# Get the screen width and height of the primary monitor
# Assuming the first monitor is the primary one
primary_monitor = get_monitors()[0]
width = primary_monitor.width
height = primary_monitor.height
print("width and height are: ")
print(width)
print(height)
app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()

# Creating this instance ui of the Ui_MainWindow is different from the one 'an_instance' inside the while loop below
# and as a result we are here

ui = Ui_MainWindow()
ui.setupUi(MainWindow)
MainWindow.show()


LED_ON = False  # this is the initial state of the LED
LED_str = str(LED_ON)


while True:
    # tuple_results = tuple(what is below the line)
    instance = Ui_MainWindow()
    tuple_results = instance.joystick_reading()
    an_instance = Ui_MainWindow()
    an_instance = ui
    up_value = tuple_results[0]
    down_value = tuple_results[1]
    forward_value = tuple_results[2]
    back_value = tuple_results[3]
    right_value = tuple_results[4]
    left_value = tuple_results[5]
    clock_value = tuple_results[6]
    anticlock_value = tuple_results[7]
    gripper_value = str(tuple_results[8])
    LED_button_pressed = tuple_results[9]
    if LED_button_pressed == True:
        print("Button is toggled")
        LED_ON = not LED_ON
        LED_str = str(LED_ON)
    leakage_value = str(tuple_results[10])
    # an_instance.update_display(up_value, down_value, forward_value,
    #                            back_value, right_value, left_value, clock_value, anticlock_value)
    # an_instance.forwardvalue.setText(forward_value)
    an_instance.anticlockvalue.setText(anticlock_value)
    an_instance.clockwisevalue.setText(clock_value)
    an_instance.forwardvalue.setText(forward_value)
    an_instance.backwardvalue.setText(back_value)
    an_instance.rightvalue.setText(right_value)
    an_instance.leftvalue.setText(left_value)
    an_instance.speeddownvalue.setText(down_value)
    an_instance.speedupvalue.setText(up_value)
    an_instance.Gripper_handler_button.setText(gripper_value)
    an_instance.LED_handler_button.setText(LED_str)
    an_instance.leakage_button.setText(leakage_value)

    # an_instance.update_GUI_with_joystick(tuple_results)

    # an_instance.Gripper_handler(tuple_results[8])

    # Ui_MainWindow.update_states(tuple_results)
